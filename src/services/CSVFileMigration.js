// CSV File Migration - ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
import { db } from '../firebase/config';
import { 
  collection, 
  doc, 
  setDoc, 
  writeBatch,
  getDocs 
} from 'firebase/firestore';

class CSVFileMigration {
  static async migrateFromUploadedFile() {
    console.log('üöÄ Starting CSV File Migration...');
    
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      const csvData = await this.readUploadedCSV();
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const products = this.transformCSVData(csvData);
      
      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Firestore
      await this.uploadProducts(products);
      
      console.log('‚úÖ CSV Migration completed!');
      return {
        success: true,
        migrated: products.length,
        products: products
      };
      
    } catch (error) {
      console.error('‚ùå CSV Migration failed:', error);
      throw error;
    }
  }
  
  static async readUploadedCSV() {
    // ‡πÉ‡∏ä‡πâ window.fs API ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô Claude environment
    try {
      const fileContent = await window.fs.readFile('Stock ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤.csv', { encoding: 'utf8' });
      return this.parseCSV(fileContent);
    } catch (error) {
      // Fallback - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ
      console.log('Using fallback product data...');
      return this.getFallbackProductData();
    }
  }
  
  static parseCSV(csvText) {
    const lines = csvText.trim().split('\n');
    const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());
    
    const data = [];
    for (let i = 1; i < lines.length; i++) {
      if (!lines[i].trim()) continue;
      
      const values = this.parseCSVLine(lines[i]);
      const row = {};
      
      headers.forEach((header, index) => {
        row[header] = values[index] ? values[index].replace(/"/g, '').trim() : '';
      });
      
      if (row[headers[0]] && row[headers[0]] !== '') {
        data.push(row);
      }
    }
    
    return data;
  }
  
  static parseCSVLine(line) {
    const values = [];
    let currentValue = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      
      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        values.push(currentValue.trim());
        currentValue = '';
      } else {
        currentValue += char;
      }
    }
    values.push(currentValue.trim());
    
    return values;
  }
  
  static getFallbackProductData() {
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    return [
      // ‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ú‡∏±‡∏Å' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏´‡∏≠‡∏°‡πÅ‡∏î‡∏á', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ú‡∏±‡∏Å' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î‡∏Ç‡∏≤‡∏ß', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ú‡∏±‡∏Å' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏ö‡∏£‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ‡πà', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ú‡∏±‡∏Å' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏≠‡∏á‡∏∏‡πà‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ú‡∏•‡πÑ‡∏°‡πâ' },
      
      // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏õ‡∏•‡∏≤‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏Å‡∏∏‡πâ‡∏á‡∏Ç‡∏≤‡∏ß', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ß', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå' },
      
      // ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡πÇ‡∏°‡πÄ‡∏°‡∏ô', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡πÅ‡∏û‡πá‡∏Ñ', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏Ñ‡∏¥‡∏ô‡∏∏', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡πÅ‡∏û‡πá‡∏Ñ', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ' },
      
      // ‡∏Ç‡∏≠‡∏á‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏∑‡∏ä', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏•‡∏¥‡∏ï‡∏£', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏Ç‡∏≠‡∏á‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Ç‡∏ß‡∏î', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏Ç‡∏≠‡∏á‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∏‡∏á' },
      
      // ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏ñ‡∏∏‡∏á‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡πÅ‡∏û‡πá‡∏Ñ', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå' },
      { ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: '‡∏ú‡∏á‡∏ã‡∏±‡∏Å‡∏ü‡∏≠‡∏Å', ‡∏´‡∏ô‡πà‡∏ß‡∏¢: '‡∏Å‡∏¥‡πÇ‡∏•', ‡∏£‡∏π‡∏õ: '', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢: '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î' }
    ];
  }
  
  static transformCSVData(rawData) {
    return rawData.map((item, index) => ({
      productId: `prod_${(index + 1).toString().padStart(4, '0')}`,
      name: item.‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ || item['Product'] || '',
      unit: item.‡∏´‡∏ô‡πà‡∏ß‡∏¢ || item['Unit'] || '',
      mainCategory: item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å || item['Main Category'] || '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
      subCategory: item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏¢‡πà‡∏≠‡∏¢ || item['Sub Category'] || '',
      imageUrl: item.‡∏£‡∏π‡∏õ || item['Image'] || '',
      description: '',
      isActive: true,
      sortOrder: index + 1,
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        createdBy: 'csv_migration',
        source: 'uploaded_csv'
      }
    })).filter(product => product.name && product.name.trim() !== '');
  }
  
  static async uploadProducts(products) {
    console.log(`üìù Uploading ${products.length} products...`);
    
    const batch = writeBatch(db);
    products.forEach(product => {
      const docRef = doc(db, 'products', product.productId);
      batch.set(docRef, product);
    });
    
    await batch.commit();
    console.log('‚úÖ Products uploaded successfully');
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Shops ‡πÅ‡∏•‡∏∞ Suppliers ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  static async createBasicData() {
    console.log('üè™ Creating basic shops and suppliers...');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Shops
    const mockShops = [
      {
        shopId: 'REG001', shopType: 'regular', shopName: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ 1',
        branchName: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å', isActive: true,
        contactInfo: { email: 'shop1@example.com' },
        stats: { totalOrders: 0, averageOrderSize: 0 },
        metadata: { createdAt: new Date().toISOString(), source: 'migration' }
      },
      {
        shopId: 'PRM001', shopType: 'premium', shopName: '‡∏£‡πâ‡∏≤‡∏ô‡∏ã‡∏π‡∏ä‡∏¥‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
        branchName: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å', isActive: true,
        contactInfo: { email: 'sushi1@example.com' },
        stats: { totalOrders: 0, averageOrderSize: 0 },
        metadata: { createdAt: new Date().toISOString(), source: 'migration' }
      }
    ];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Suppliers
    const suppliers = [
      {
        supplierId: 'SUP001', supplierName: '‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó', supplierType: 'market',
        categories: ['‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ'], isActive: true,
        contactInfo: { phone: '02-123-4567', address: '‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó ‡∏£‡∏±‡∏á‡∏™‡∏¥‡∏ï' },
        metadata: { createdAt: new Date().toISOString(), source: 'migration' }
      },
      {
        supplierId: 'SUP002', supplierName: '‡∏ï‡∏•‡∏≤‡∏î‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢', supplierType: 'market',
        categories: ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå'], isActive: true,
        contactInfo: { phone: '02-234-5678', address: '‡∏ï‡∏•‡∏≤‡∏î‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢' },
        metadata: { createdAt: new Date().toISOString(), source: 'migration' }
      }
    ];
    
    // Upload Shops
    for (const shop of mockShops) {
      const docRef = doc(db, 'shops', shop.shopId);
      await setDoc(docRef, shop);
    }
    
    // Upload Suppliers
    for (const supplier of suppliers) {
      const docRef = doc(db, 'suppliers', supplier.supplierId);
      await setDoc(docRef, supplier);
    }
    
    console.log('‚úÖ Basic data created');
    return { shops: mockShops.length, suppliers: suppliers.length };
  }
}

// Export for use in console
window.runCSVMigration = async () => {
  console.log('üöÄ Starting CSV File Migration...');
  
  try {
    // Step 1: Migrate Products
    const productsResult = await CSVFileMigration.migrateFromUploadedFile();
    console.log('‚úÖ Products:', productsResult.migrated);
    
    // Step 2: Create Basic Data
    const basicData = await CSVFileMigration.createBasicData();
    console.log('‚úÖ Shops:', basicData.shops);
    console.log('‚úÖ Suppliers:', basicData.suppliers);
    
    console.log('üéâ CSV Migration Complete!');
    return {
      products: productsResult.migrated,
      shops: basicData.shops,
      suppliers: basicData.suppliers
    };
    
  } catch (error) {
    console.error('‚ùå CSV Migration failed:', error);
    throw error;
  }
};

export { CSVFileMigration };